function [output_filter]=wiener_filter(x,y,t,n)

%#####################################################################
spm_s = fft(x); %СПМ референсного сигнала
es_s = spm_s.*conj(spm_s); % энергетический спектр референсного сигнала
%#####################################################################



%#####################################################################
noise = zeros(1,length(t));
%создадим модель шума
for i=1:1:length(t)
    noise(i) = normrnd(0,n);
end
spm_noise = fft(noise); %СПМ шума
spm_noise = spm_noise.*conj(spm_noise); %энергетический спектр шума
mean_spm_noise= real(mean(spm_noise)); %среднее значение энергетический спектра шума
mean_spm_noise_massiv=zeros(1,length(t));
for i=1:1:length(t)
    mean_spm_noise_massiv(i) = mean_spm_noise;
end
%#####################################################################



%#####################################################################
KOF = zeros(1,length(t)); 
for i=1:1:length(t)
    KOF(1,i) = es_s(1,i)/(es_s(1,i)+mean_spm_noise_massiv(1,i)); %коэффициент передачи фильтра Винера
end
%#####################################################################



%#####################################################################
spm_y = fft(y); %СПМ смеси сигнал/шум


spm_y_out = zeros(1,length(t)); 
for i=1:1:length(t)
    spm_y_out(1,i) = spm_y(1,i)*KOF(1,i); %выходной сигнал в частотной области
end

output_filter = ifft(spm_y_out); %выходной сигнал во временной области

%s_d = std(x-output_filter); %CКО ошибки

%#####################################################################

end